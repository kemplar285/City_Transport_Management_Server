/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ee.cybernetica.api;

import ee.cybernetica.exception.BusStopNotFoundException;
import ee.cybernetica.model.BusLine;
import ee.cybernetica.model.BusLineDTO;
import ee.cybernetica.model.ErrorMessage;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-04-08T12:57:29.477097300+03:00[Europe/Tallinn]")
@Validated
@Tag(name = "bus-lines", description = "the bus-lines API")
public interface BusLinesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /bus-lines : Create a bus line
     * Creates a bus line with given name and bus stops.
     *
     * @param busLine A new bus line object with name and list of bus stops. (optional)
     * @return Returned a bus line dto with fullfilled id field (status code 200)
     * or One of the given bus stops do not exist. (status code 400)
     */
    @Operation(
            operationId = "createBusLine",
            summary = "Create a bus line",
            tags = {"LineMangagment"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Returned a bus line dto with fullfilled id field", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BusLine.class))),
                    @ApiResponse(responseCode = "400", description = "One of the given bus stops do not exist.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class)))
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/bus-lines",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default ResponseEntity<BusLine> createBusLine(
            @Parameter(name = "BusLine", description = "A new bus line object with name and list of bus stops.",
                    schema = @Schema(description = "")) @Valid @RequestBody(required = false) BusLineDTO busLine
    ) throws BusStopNotFoundException {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"busStopIds\" : [ 0, 0 ], \"name\" : \"Kummeli - Ringtee\", \"id\" : 0 }";
                    //ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /bus-lines : Get all bus lines with given filters.
     * Queries all bus lines with given optional name, busStopId and limit filters.
     *
     * @param maxResults The numbers of items to return. (optional, default to 20)
     * @param name       Optional parameter to filter bus lines by partial name. (optional)
     * @param busStopId  Optional parameter to filter bus lines by bus stops. (optional)
     * @return Returned a list of bus stops which fullfill query params. (status code 200)
     */
    @Operation(
            operationId = "readBusLines",
            summary = "Get all bus lines with given filters.",
            tags = {"LineMangagment"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Returned a list of bus stops which fullfill query params.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BusLine.class)))
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/bus-lines",
            produces = {"application/json"}
    )
    default ResponseEntity<List<BusLine>> readBusLines(
            @Min(1) @Max(50) @Parameter(name = "maxResults", description = "The numbers of items to return.",
                    schema = @Schema(description = "", defaultValue = "20"))
            @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "20") Integer maxResults,
            @Parameter(name = "name", description = "Optional parameter to filter bus lines by partial name.",
                    schema = @Schema(description = ""))
            @Valid @RequestParam(value = "name", required = false) Optional<String> name,
            @Parameter(name = "busStopId", description = "Optional parameter to filter bus lines by bus stops.",
                    schema = @Schema(description = ""))
            @Valid @RequestParam(value = "busStopId", required = false) Optional<Integer> busStopId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"busStopIds\" : [ 0, 0 ], \"name\" : \"Kummeli - Ringtee\", \"id\" : 0 }";
                    //ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }
}
